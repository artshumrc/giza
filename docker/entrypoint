#!/bin/bash

set -o errexit
set -o pipefail

until python3 /app/docker/postgres_ready.py; do
  >&2 echo "Waiting for PostgreSQL to become available..."
  sleep 1
done
>&2 echo "PostgreSQL is available"

if [[ ($MIGRATE) && ("$MIGRATE" = "True") ]]; then
  python3 manage.py makemigrations --no-input
  python3 manage.py migrate --no-input --fake-initial
  echo "Migrations finished"
  python3 manage.py collectstatic --noinput
  echo "Static files collected"
#   python3 manage.py graph_models fionn --exclude-models TimeStampedModel -o models.png
#   echo "Graph png for the models generated"
fi

# if [[ ($INIT_SUPERUSER) && ("$INIT_SUPERUSER" = "True") ]]; then
#   python3 manage.py initialise_superuser --user "$DJANGO_ADMIN" --email "$DJANGO_ADMIN_EMAIL" --password "$DJANGO_ADMIN_PASSWORD"
# fi

# if [[ ($SCHEDULE_REINDEX) && ("$SCHEDULE_REINDEX" = "True") ]]; then
#   echo "Scheduling regular reindex"
#   python3 manage.py reindex --schedule=True
# fi

# Use nginx + Gunicorn or Django's built-in server
if [[ ($TEST_SERVER) && ("$TEST_SERVER" = "True" ) ]]; then
  echo "Starting Django's built-in server"
  python3 /app/manage.py runserver 0.0.0.0:8000
else
  echo "Starting nginx which proxies to :8000"
  nginx
  echo "Bringing up gunicorn on :5000 as wsgi host"
  gunicorn --bind :5000 --workers 3 --threads 16 --timeout 0 giza.wsgi:application
fi